import prismaClient  from '../src/lib/prisma';

const prisma = prismaClient;

async function cleanup() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

  // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ–±—Ä–∞—Ç–Ω–æ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é)
  await prisma.payment.deleteMany({});
  await prisma.breeding.deleteMany({});
  await prisma.breedingProtocol.deleteMany({});
  await prisma.notification.deleteMany({});
  await prisma.task.deleteMany({});
  await prisma.experimentAnimal.deleteMany({});
  await prisma.experiment.deleteMany({});
  await prisma.measurement.deleteMany({});
  await prisma.recordPhoto.deleteMany({});
  await prisma.animalRecord.deleteMany({});
  await prisma.animalPhoto.deleteMany({});
  await prisma.customFieldValue.deleteMany({});
  await prisma.animal.deleteMany({});
  await prisma.customField.deleteMany({});
  await prisma.animalType.deleteMany({});
  await prisma.userLaboratory.deleteMany({});
  await prisma.user.deleteMany({});
  await prisma.subscription.deleteMany({});
  await prisma.laboratory.deleteMany({});
  await prisma.plan.deleteMany({});

  console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

async function main() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await cleanup();

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏...');
    const plan1 = await prisma.plan.create({
      data: {
        name: 'Free',
        description: '–ë–∞–∑–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –º–∞–ª—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π',
        price: 0,
        currency: 'CAD',
        billingCycle: 'MONTHLY',
        maxUsers: 3,
        features: {
          maxAnimals: 50,
          experiments: true,
          basicReporting: true,
          storage: '1GB',
        },
        isActive: true,
      },
    });
    const plan2 = await prisma.plan.create({
      data: {
        name: 'Standard',
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π',
        price: 49.99,
        currency: 'CAD',
        billingCycle: 'MONTHLY',
        maxUsers: 10,
        features: {
          maxAnimals: 500,
          experiments: true,
          advancedReporting: true,
          breeding: true,
          storage: '10GB',
        },
        isActive: true,
      },
    });
    await prisma.plan.create({
      data: {
        name: 'Premium',
        description: '–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤',
        price: 149.99,
        currency: 'CAD',
        billingCycle: 'MONTHLY',
        maxUsers: 50,
        features: {
          maxAnimals: 'unlimited',
          experiments: true,
          advancedReporting: true,
          breeding: true,
          customFields: true,
          apiAccess: true,
          storage: '100GB',
        },
        isActive: true,
      },
    });
    console.log('‚úÖ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π...');
    const laboratory1 = await prisma.laboratory.create({
      data: {
        name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π –±–∏–æ–ª–æ–≥–∏–∏',
        description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ç–∏–∫–∏ –∏ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π –±–∏–æ–ª–æ–≥–∏–∏',
        username: 'director_molbio',
        position: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏',
      },
    });
    const laboratory2 = await prisma.laboratory.create({
      data: {
        name: '–¶–µ–Ω—Ç—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã',
        description: '–î–æ–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤',
        username: 'researcher_petrov',
        position: '–°—Ç–∞—Ä—à–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      },
    });
    console.log('‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫...');
    const subscription1 = await prisma.subscription.create({
      data: {
        laboratoryId: laboratory1.id,
        planId: plan1.id, // Standard –ø–ª–∞–Ω
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
        status: 'ACTIVE',
        maxUsers: 10,
        paymentMethod: 'Credit Card',
        autoRenew: true,
      },
    });
    const subscription2 = await prisma.subscription.create({
      data: {
        laboratoryId: laboratory2.id,
        planId: plan2.id, // Premium –ø–ª–∞–Ω
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // +1 –≥–æ–¥
        status: 'ACTIVE',
        maxUsers: 50,
        paymentMethod: 'Bank Transfer',
        autoRenew: true,
      },
    });
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const user1 = await prisma.user.create({
      data: {
        email: 'director@molbio-lab.ca',
        institution: 'My Lab Inc.',
        address: '123 Research St, Toronto, ON M5V 1A1',
        contactPhone: '+1-416-555-0123',
        password: 'hashedPassword123', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
      },
    });
    const user2 = await prisma.user.create({
      data: {
        email: 'researcher1@molbio-lab.ca',
        institution: 'Iseehear Inc.',
        address: '456 Medical Ave, Vancouver, BC V6B 2K9',
        contactPhone: '+1-604-555-0456',
        password: 'hashedPassword456',
        firstName: '–ü–µ—Ç—Ä',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
      },
    });
    const user3 = await prisma.user.create({
      data: {
        email: 'vet@expmed-center.ca',
        institution: 'Lab-Rador Accisst',
        address: '123 Research St, Toronto, ON M5V 1A1',
        contactPhone: '+1-416-555-0123',
        password: 'hashedPassword789',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
      },
    });
    const user4 = await prisma.user.create({
      data: {
        email: 'tech@expmed-center.ca',
        institution: 'Lab-Irint Inc.',
        address: '456 Medical Ave, Vancouver, BC V6B 2K9',
        contactPhone: '+1-604-555-0456',
        password: 'hashedPassword101',
        firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        lastName: '–ö–æ–º–∞—Ä–æ–≤',
      },
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º–∏
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º–∏...');
    await prisma.userLaboratory.create({
      data: {
        userId: user1.id,
        laboratoryId: laboratory2.id,
        role: 'DIRECTOR',
        accessStatus: 'ACTIVE',
      },
    });
    await prisma.userLaboratory.create({
      data: {
        userId: user2.id,
        laboratoryId: laboratory1.id,
        role: 'RESEARCHER',
        accessStatus: 'ACTIVE',
      },
    });
    await prisma.userLaboratory.create({
      data: {
        userId: user3.id,
        laboratoryId: laboratory2.id,
        role: 'VETERINARIAN',
        accessStatus: 'ACTIVE',
      },
    });
    await prisma.userLaboratory.create({
      data: {
        userId: user4.id,
        laboratoryId: laboratory2.id,
        role: 'TECHNICIAN',
        accessStatus: 'ACTIVE',
      },
    });
    console.log('‚úÖ –°–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
    console.log('üê≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    const animalType1 = await prisma.animalType.create({
      data: {
        name: '–ú—ã—à–∏',
        description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –º—ã—à–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        laboratoryId: laboratory1.id,
      },
    });
    const animalType2 = await prisma.animalType.create({
      data: {
        name: '–ö—Ä—ã—Å—ã',
        description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∫—Ä—ã—Å—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤',
        laboratoryId: laboratory1.id,
      },
    });
    const animalType3 = await prisma.animalType.create({
      data: {
        name: '–ö—Ä–æ–ª–∏–∫–∏',
        description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∫—Ä–æ–ª–∏–∫–∏ –¥–ª—è –¥–æ–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        laboratoryId: laboratory2.id,
      },
    });
    console.log('‚úÖ –¢–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π...');
    const customField1 = await prisma.customField.create({
      data: {
        name: '–¶–≤–µ—Ç —à–µ—Ä—Å—Ç–∏',
        fieldType: 'DROPDOWN',
        isRequired: false,
        description: '–¶–≤–µ—Ç —à–µ—Ä—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
        animalTypeId: animalType1.id,
      },
    });
    const customField2 = await prisma.customField.create({
      data: {
        name: '–ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏',
        fieldType: 'TEXT',
        isRequired: true,
        description: '–ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≥–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∂–∏–≤–æ—Ç–Ω–æ–µ',
        animalTypeId: animalType1.id,
      },
    });
    const customField3 = await prisma.customField.create({
      data: {
        name: '–í–µ—Å –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏',
        fieldType: 'NUMBER',
        isRequired: true,
        description: '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –≥—Ä–∞–º–º–∞—Ö',
        animalTypeId: animalType2.id,
      },
    });
    console.log('‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
    console.log('üêπ –°–æ–∑–¥–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    const animal1 = await prisma.animal.create({
      data: {
        identifier: 'M001',
        name: '–ú—ã—à–∫–∞ –ê–ª—å—Ñ–∞',
        animalTypeId: animalType1.id,
        laboratoryId: laboratory1.id,
        birthDate: new Date('2024-01-15'),
        sex: 'FEMALE',
        strain: 'C57BL/6',
        genotype: 'WT',
        status: 'ACTIVE',
        location: '–°—Ç–µ–ª–ª–∞–∂ A, –ö–ª–µ—Ç–∫–∞ 1',
        origin: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
      },
    });
    const animal2 = await prisma.animal.create({
      data: {
        identifier: 'M002',
        name: '–ú—ã—à–∫–∞ –ë–µ—Ç–∞',
        animalTypeId: animalType1.id,
        laboratoryId: laboratory1.id,
        birthDate: new Date('2024-01-20'),
        sex: 'MALE',
        strain: 'C57BL/6',
        genotype: 'KO',
        status: 'EXPERIMENT',
        location: '–°—Ç–µ–ª–ª–∞–∂ A, –ö–ª–µ—Ç–∫–∞ 2',
        origin: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
      },
    });
    const animal3 = await prisma.animal.create({
      data: {
        identifier: 'R001',
        name: '–ö—Ä—ã—Å–∞ –ì–∞–º–º–∞',
        animalTypeId: animalType2.id,
        laboratoryId: laboratory1.id,
        birthDate: new Date('2023-12-10'),
        sex: 'MALE',
        strain: 'Wistar',
        genotype: 'WT',
        status: 'ACTIVE',
        location: '–°—Ç–µ–ª–ª–∞–∂ B, –ö–ª–µ—Ç–∫–∞ 5',
        origin: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ - BioLab Inc',
      },
    });
    const animal4 = await prisma.animal.create({
      data: {
        identifier: 'K001',
        name: '–ö—Ä–æ–ª–∏–∫ –î–µ–ª—å—Ç–∞',
        animalTypeId: animalType3.id,
        laboratoryId: laboratory1.id,
        birthDate: new Date('2023-11-05'),
        sex: 'FEMALE',
        strain: 'New Zealand White',
        genotype: 'WT',
        status: 'BREEDING',
        location: '–í–æ–ª—å–µ—Ä 1',
        origin: '–í–Ω–µ—à–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
      },
    });
    console.log('‚úÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π...');
    await prisma.customFieldValue.create({
      data: {
        value: '–ë–µ–ª—ã–π',
        animalId: animal1.id,
        customFieldId: customField1.id,
      },
    });
    await prisma.customFieldValue.create({
      data: {
        value: 'A-001',
        animalId: animal1.id,
        customFieldId: customField2.id,
      },
    });
    await prisma.customFieldValue.create({
      data: {
        value: '–ß–µ—Ä–Ω—ã–π',
        animalId: animal2.id,
        customFieldId: customField1.id,
      },
    });
    await prisma.customFieldValue.create({
      data: {
        value: 'A-002',
        animalId: animal2.id,
        customFieldId: customField2.id,
      },
    });
    await prisma.customFieldValue.create({
      data: {
        value: '450',
        animalId: animal3.id,
        customFieldId: customField3.id,
      },
    });
    console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤...');
    const experiment1 = await prisma.experiment.create({
      data: {
        title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ X –Ω–∞ –ø–∞–º—è—Ç—å',
        description: '–ò–∑—É—á–µ–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–æ—Ç—Ä–æ–ø–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        laboratoryId: laboratory1.id,
        startDate: new Date(),
        status: 'ACTIVE',
        createdById: user2.id,
        protocol: '–ü—Ä–µ–ø–∞—Ä–∞—Ç X –≤–≤–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏–±—Ä—é—à–∏–Ω–Ω–æ –≤ –¥–æ–∑–µ 10 –º–≥/–∫–≥ –º–∞—Å—Å—ã —Ç–µ–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –ú–æ—Ä—Ä–∏—Å–∞.',
      },
    });
    const experiment2 = await prisma.experiment.create({
      data: {
        title: '–¢–æ–∫—Å–∏–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ Y',
        description: '–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞',
        laboratoryId: laboratory2.id,
        startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // +7 –¥–Ω–µ–π
        status: 'PLANNED',
        createdById: user3.id,
        protocol: '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ Y –≤ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏—Ö –¥–æ–∑–∞—Ö. –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 28 –¥–Ω–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.',
      },
    });
    console.log('‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º
    console.log('üî¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º...');
    await prisma.experimentAnimal.create({
      data: {
        experimentId: experiment1.id,
        animalId: animal1.id,
        notes: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞',
      },
    });
    await prisma.experimentAnimal.create({
      data: {
        experimentId: experiment1.id,
        animalId: animal2.id,
        notes: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –ø—Ä–µ–ø–∞—Ä–∞—Ç X',
      },
    });
    await prisma.experimentAnimal.create({
      data: {
        experimentId: experiment2.id,
        animalId: animal4.id,
        notes: '–í—ã—Å–æ–∫–∞—è –¥–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ Y',
      },
    });
    console.log('‚úÖ –ñ–∏–≤–æ—Ç–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–π...');
    await prisma.animalRecord.create({
      data: {
        animalId: animal1.id,
        recordType: 'ROUTINE_CHECK',
        createdById: user2.id,
        temperature: 37.2,
        weight: 22.5,
        feedIntake: 4.2,
        waterIntake: 5.8,
        activityLevel: 'NORMAL',
        notes: '–ñ–∏–≤–æ—Ç–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ, –∞–ø–ø–µ—Ç–∏—Ç —Ö–æ—Ä–æ—à–∏–π, –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
      },
    });
    await prisma.animalRecord.create({
      data: {
        animalId: animal2.id,
        recordType: 'MEDICATION',
        createdById: user2.id,
        temperature: 37.1,
        weight: 23.1,
        activityLevel: 'NORMAL',
        notes: '–í–≤–µ–¥–µ–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç X —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞',
      },
    });
    await prisma.animalRecord.create({
      data: {
        animalId: animal3.id,
        recordType: 'OBSERVATION',
        createdById: user4.id,
        temperature: 38.5,
        weight: 485.2,
        feedIntake: 25.0,
        waterIntake: 45.0,
        activityLevel: 'HIGH',
        notes: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∏–π –∞–ø–ø–µ—Ç–∏—Ç',
      },
    });
    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
    await prisma.task.create({
      data: {
        title: '–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø—ã A',
        description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –º—ã—à–µ–π –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ',
        assignedToId: user2.id,
        experimentId: experiment1.id,
        dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // –∑–∞–≤—Ç—Ä–∞
        status: 'PENDING',
        priority: 'HIGH',
      },
    });
    await prisma.task.create({
      data: {
        title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞',
        description: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç–æ–∫—Å–∏–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        assignedToId: user3.id,
        experimentId: experiment2.id,
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // +5 –¥–Ω–µ–π
        status: 'IN_PROGRESS',
        priority: 'MEDIUM',
      },
    });
    await prisma.task.create({
      data: {
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö',
        description: '–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º—É',
        assignedToId: user4.id,
        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // +3 –¥–Ω—è
        status: 'PENDING',
        priority: 'LOW',
      },
    });
    console.log('‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('üîî –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    await prisma.notification.create({
      data: {
        userId: user2.id,
        title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏',
        message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑–≤–µ—Å–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø–µ A —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ X –Ω–∞ –ø–∞–º—è—Ç—å"',
        type: 'TASK',
        isRead: false,
      },
    });
    await prisma.notification.create({
      data: {
        userId: user3.id,
        title: '–ù–æ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
        message: '–í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∫—Ä–æ–ª–∏–∫ K001',
        type: 'ANIMAL_ALERT',
        isRead: true,
      },
    });
    await prisma.notification.create({
      data: {
        userId: user4.id,
        title: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
        message: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ X –Ω–∞ –ø–∞–º—è—Ç—å" –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        type: 'EXPERIMENT',
        isRead: false,
      },
    });
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
    console.log('üß¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è...');
    const breedingProtocol1 = await prisma.breedingProtocol.create({
      data: {
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–µ–π C57BL/6',
        animalTypeId: animalType1.id,
        description: '–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –ª–∏–Ω–∏–∏ C57BL/6',
        instructions: '1. –ü–æ–¥—Å–∞–¥–∫–∞ —Å–∞–º—Ü–∞ –∫ —Å–∞–º–∫–µ –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 1:2\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–∫–∏\n3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è\n4. –ö–æ–Ω—Ç—Ä–æ–ª—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ 14-16 –¥–µ–Ω—å',
      },
    });
    await prisma.breedingProtocol.create({
      data: {
        name: '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –∫—Ä–æ–ª–∏–∫–æ–≤ New Zealand White',
        animalTypeId: animalType3.id,
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –∫—Ä–æ–ª–∏–∫–æ–≤',
        instructions: '1. –ü–æ–¥—Å–∞–¥–∫–∞ —Å–∞–º—Ü–∞ –∫ —Å–∞–º–∫–µ –Ω–∞ 15 –º–∏–Ω—É—Ç\n2. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥—Å–∞–¥–∫–∞ —á–µ—Ä–µ–∑ 8-12 —á–∞—Å–æ–≤\n3. –ü–∞–ª—å–ø–∞—Ü–∏—è –Ω–∞ 14 –¥–µ–Ω—å\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–Ω–µ–∑–¥–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –Ω–∞ 28 –¥–µ–Ω—å',
      },
    });
    console.log('‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏
    console.log('üë∂ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏...');
    await prisma.breeding.create({
      data: {
        motherId: animal1.id, // –ú—ã—à–∫–∞ –ê–ª—å—Ñ–∞ (—Å–∞–º–∫–∞)
        fatherId: animal2.id, // –ú—ã—à–∫–∞ –ë–µ—Ç–∞ (—Å–∞–º–µ—Ü)
        protocolId: breedingProtocol1.id,
        startDate: new Date('2024-05-01'),
        status: 'ACTIVE',
        notes: '–ü–µ—Ä–≤–æ–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã',
      },
    });
    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π...');
    await prisma.payment.create({
      data: {
        subscriptionId: subscription1.id,
        amount: 49.99,
        currency: 'CAD',
        paymentDate: new Date(),
        paymentMethod: 'Credit Card',
        transactionId: 'tx_1234567890',
        status: 'COMPLETED',
        invoiceNumber: 'INV-2024-001',
        notes: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –∑–∞ Standard –ø–ª–∞–Ω',
      },
    });
    await prisma.payment.create({
      data: {
        subscriptionId: subscription2.id,
        amount: 149.99,
        currency: 'CAD',
        paymentDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // -30 –¥–Ω–µ–π
        paymentMethod: 'Bank Transfer',
        transactionId: 'bt_0987654321',
        status: 'COMPLETED',
        invoiceNumber: 'INV-2024-002',
        notes: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium –ø–ª–∞–Ω',
      },
    });
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞–Ω—ã');

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');

    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\nüìä –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
